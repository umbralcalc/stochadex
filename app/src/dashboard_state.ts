/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: app/src/dashboard_state.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class DashboardPartitionState extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cumulative_timesteps?: number;
        partition_name?: string;
        state?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cumulative_timesteps" in data && data.cumulative_timesteps != undefined) {
                this.cumulative_timesteps = data.cumulative_timesteps;
            }
            if ("partition_name" in data && data.partition_name != undefined) {
                this.partition_name = data.partition_name;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
        }
    }
    get cumulative_timesteps() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set cumulative_timesteps(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get partition_name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set partition_name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set state(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        cumulative_timesteps?: number;
        partition_name?: string;
        state?: number[];
    }): DashboardPartitionState {
        const message = new DashboardPartitionState({});
        if (data.cumulative_timesteps != null) {
            message.cumulative_timesteps = data.cumulative_timesteps;
        }
        if (data.partition_name != null) {
            message.partition_name = data.partition_name;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        return message;
    }
    toObject() {
        const data: {
            cumulative_timesteps?: number;
            partition_name?: string;
            state?: number[];
        } = {};
        if (this.cumulative_timesteps != null) {
            data.cumulative_timesteps = this.cumulative_timesteps;
        }
        if (this.partition_name != null) {
            data.partition_name = this.partition_name;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cumulative_timesteps != 0)
            writer.writeDouble(1, this.cumulative_timesteps);
        if (this.partition_name.length)
            writer.writeString(2, this.partition_name);
        if (this.state.length)
            writer.writePackedDouble(3, this.state);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DashboardPartitionState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DashboardPartitionState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.cumulative_timesteps = reader.readDouble();
                    break;
                case 2:
                    message.partition_name = reader.readString();
                    break;
                case 3:
                    message.state = reader.readPackedDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DashboardPartitionState {
        return DashboardPartitionState.deserialize(bytes);
    }
}
